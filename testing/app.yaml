apiVersion: v1
kind: Service
metadata:
  labels:
  name: factorium-svc
  namespace: test-app
spec:
  ports:
  - name: http-web
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/name: factorium-svc
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
  name: factorium-svc-sa
  namespace: test-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: factorium-svc-deployment
  namespace: test-app
spec:
  minReadySeconds: 3
  progressDeadlineSeconds: 60
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: factorium-svc
  template:
    metadata:
      annotations:
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      labels:
        app.kubernetes.io/name: factorium-svc
        app.beyondtrust.com/team: testteam
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: factorium-svc
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - envFrom:
        image: hello-world:latest
        imagePullPolicy: Always
        name: primary
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 500m
            memory: 384Mi
          requests:
            cpu: 100m
            memory: 384Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
          runAsNonRoot: false
      serviceAccountName: factorium-svc-sa
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cmd-params-cm
data:
  application.namespaces: test-app
  notificationscontroller.selfservice.enabled: "true"
  notificationscontroller.log.level: "debug"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
data:
  trigger.compass-app-deployed: |
    - when: app.status.operationState.phase in ['Succeeded']
      description: Application is synced and healthy. Triggered once per commit.
      send: [compass-event]

  service.webhook.compass-event: |
    url: https://4581c55e-7ef1-4572-b184-b54e77963a64.hello.atlassian-dev.net/x1/Sm4V7dSSSIb7HK9lrvoiBq-5VxE

    headers:
    - name: "Content-type"
      value: "application/json"
    - name: "Accept"
      value: "application/json"
    - name: "Authorization"
      value: "Basic {{ .secrets.CompassToken }}"

  template.compass-event: |
    webhook:
      compass-event:
        method: POST
        path: /
        body: |
          {
            {{- range $idx, $c := .app.status.operationState.syncResult.resources }}
            {{- if not $idx}}{{- continue }}{{- end}}
            {{- if eq $c.kind "Service"}}
            "externalName": "{{- $c.name }}",
            {{- end}}
            {{- end}}
            "type": "deployment",
            "metricName": "{{ .app.metadata.name }} deployment XXX",
            "newMetricValue": 1,
            "deployment": {
              "startedAt": "{{ .app.status.operationState.startedAt }}",
              "completedAt": "{{ .app.status.operationState.finishedAt }}",
              "lastUpdated": "{{ .app.status.operationState.finishedAt }}",
              "externalEventSourceId": "{{call .strings.ReplaceAll (index .app.metadata.annotations "project.github.source") "BeyondTrust/" "" }}",
              },
            "externalId": "{{ index .app.metadata.annotations "project.github.source" }}",
          }

  subscriptions: |
    - recipients:
      - compass-event
    - triggers:
      - compass-app-deployed



